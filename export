To export the final state of a libvirt (KVM/QEMU) virtual machine (VM), you need to export the VM's disk image and optionally its XML configuration. This exported image can then be used to replicate or restore the VM on another host or for backup purposes.

Here's a step-by-step guide on how to export the final state of a VM.
1. Export the VM Disk Image

The VM's disk image contains the operating system, installed software, and all data. The following steps explain how to export the disk image using virsh and qemu-img.
1.1 Shutdown the VM

Before exporting, it is recommended to shut down the VM to ensure the integrity of the disk image.

bash

virsh shutdown <vm_name>

You can check the status of the VM with:

bash

virsh list --all

Ensure that the VM has shut down.
1.2 Locate the Disk Image

To find the location of the disk image, you can use:

bash

virsh domblklist <vm_name>

This will display the path of the disk associated with the VM. For example:

bash

 Target     Source
------------------------------------------------
 vda        /var/lib/libvirt/images/my_vm.qcow2

1.3 Export the Disk Image

Once you have the disk path, you can copy the disk image for export using the qemu-img command, which allows conversion and export of disk images in various formats.

If you want to export the image in QCOW2 format (which is the default and supports snapshots and compression):

bash

qemu-img convert -O qcow2 /var/lib/libvirt/images/my_vm.qcow2 /path/to/exported_vm_image.qcow2

If you want to export the image in RAW format (uncompressed, but larger in size):

bash

qemu-img convert -O raw /var/lib/libvirt/images/my_vm.qcow2 /path/to/exported_vm_image.raw

You can also compress the QCOW2 image:

bash

qemu-img convert -c -O qcow2 /var/lib/libvirt/images/my_vm.qcow2 /path/to/exported_vm_image_compressed.qcow2

1.4 Verify the Exported Disk Image

You can inspect the exported disk image with the following command:

bash

qemu-img info /path/to/exported_vm_image.qcow2

This will show you details about the image format, virtual size, and actual size on the disk.
2. Export the VM's XML Configuration

In addition to exporting the disk image, it's a good idea to export the VM's XML configuration. This file contains the VM's hardware settings (CPU, memory, network interface, etc.), making it easier to recreate the VM on a different host.
2.1 Dump the XML Configuration

You can export the XML configuration of the VM using virsh:

bash

virsh dumpxml <vm_name> > /path/to/exported_vm.xml

This will create a file (exported_vm.xml) containing the VM’s full configuration.
3. Reimporting the VM on Another Host
3.1 Copy Files to Another Host

Transfer the exported disk image and XML configuration to another host using a tool like scp or rsync:

bash

scp /path/to/exported_vm_image.qcow2 user@remote_host:/var/lib/libvirt/images/
scp /path/to/exported_vm.xml user@remote_host:/path/to/

3.2 Define the VM on the New Host

On the destination host, you can recreate the VM by using the exported XML configuration:

bash

virsh define /path/to/exported_vm.xml

Ensure the disk path in the XML matches the location on the new host (you may need to edit the XML if the paths are different).
3.3 Start the VM

Once the VM is defined, you can start it:

bash

virsh start <vm_name>

4. Exporting the Entire VM as an OVA/OVF (Optional)

If you want to export the entire VM in OVA or OVF format, you can do it using tools like libguestfs or virt-v2v. These formats are commonly used for moving VMs between different hypervisors (e.g., KVM, VMware).
4.1 Using virt-v2v (for OVA/OVF)

You can convert the VM into an OVA/OVF package with virt-v2v:

bash

virt-v2v -i libvirt -o local -of qcow2 -os /path/to/exported_directory <vm_name>

This will export the VM in a format compatible with other hypervisors.
Conclusion

    Disk Image Export: Export the final state of the VM's disk image using qemu-img convert.
    XML Configuration Export: Dump the VM’s configuration using virsh dumpxml.
    Reimporting: Use virsh define and virsh start on a new host to recreate the VM.

This process allows you to back up or transfer a VM between different environments while ensuring that its final state is preserved.
