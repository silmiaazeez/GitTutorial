In libvirt (KVM/QEMU), you can manage and monitor resource allocation for virtual machines (VMs) in terms of CPU, memory, disk, and network resources. Effective resource management ensures that your VMs run efficiently and that the host's resources are optimally utilized. Here's how you can allocate resources and monitor usage.
1. Resource Allocation in libvirt (KVM/QEMU)
1.1 CPU Allocation

You can allocate specific CPUs (vCPUs) to your VM and control how much CPU time a VM can use.

    Set vCPUs for a VM: In the VMâ€™s XML configuration, you can specify the number of vCPUs:

    xml

<vcpu placement='static'>4</vcpu>

Limit CPU Usage (CPU Capping): You can limit the CPU time a VM can consume using the cputune settings in the XML:

xml

<cputune>
  <shares>1024</shares>
  <quota>50000</quota>
  <period>100000</period>
</cputune>

    shares: Determines the CPU priority (default is 1024).
    quota and period: These values are used to set a percentage of CPU time. For example, if quota is 50,000 and period is 100,000, the VM can use 50% of the CPU time.

Pin vCPUs to Physical CPUs (CPU Affinity): You can pin a VM's virtual CPUs to specific physical CPUs (pCPUs) to control where the VM runs on the host:

xml

    <vcpu placement='static'>2</vcpu>
    <cputune>
      <vcpupin vcpu='0' cpuset='0-1'/>
      <vcpupin vcpu='1' cpuset='2-3'/>
    </cputune>

1.2 Memory Allocation

You can allocate both static and dynamic memory for your VM.

    Set Static Memory Allocation: Specify the amount of memory a VM should have in its XML configuration:

    xml
    <memory unit='KiB'>2097152</memory>  <!-- 2 GB -->
    <currentMemory unit='KiB'>2097152</currentMemory>

    Dynamic Memory Allocation (Ballooning): You can allow the memory to scale dynamically if memory ballooning is enabled:

    xml
    <memoryBacking>
      <hugepages/>
    </memoryBacking>

    Also, install the virtio-balloon driver on the guest OS for ballooning support.

1.3 Disk I/O Allocation

To control how much disk I/O a VM can use, you can use the blkio settings.

    Set Disk I/O Limits: You can limit the disk bandwidth a VM can use:

    xml
    <disk type='file' device='disk'>
      <driver name='qemu' type='qcow2'/>
      <source file='/var/lib/libvirt/images/vm-disk.qcow2'/>
      <target dev='vda' bus='virtio'/>
      <iotune>
        <read_bytes_sec>1048576</read_bytes_sec>  <!-- 1 MB/s read limit -->
        <write_bytes_sec>1048576</write_bytes_sec> <!-- 1 MB/s write limit -->
      </iotune>
    </disk>

1.4 Network Bandwidth Allocation

You can limit the bandwidth for each network interface on a VM.

    Set Network Bandwidth Limits:

    xml
    <interface type='network'>
      <source network='default'/>
      <model type='virtio'/>
      <bandwidth>
        <inbound average='1000' peak='2000' burst='512'/>
        <outbound average='1000' peak='2000' burst='512'/>
      </bandwidth>
    </interface>

        average: Average bandwidth in kbps.
        peak: Maximum burst bandwidth.
        burst: Burst size in KB.

2. Resource Monitoring in libvirt (KVM/QEMU)

To monitor the resource usage of your VMs, you can use the following tools and commands.
2.1 virsh Commands for Monitoring

virsh provides various commands to monitor CPU, memory, and disk utilization of your VMs.

    Check CPU and Memory Usage:

    bash
    virsh domstats VM_Name

    This command gives detailed statistics about CPU, memory, and block I/O for the specified VM.

    Check Specific Resource Usage (CPU and Memory):

    bash
    virsh cpu-stats VM_Name
    virsh dommemstat VM_Name

    These commands show detailed CPU and memory usage stats.

2.2 Monitoring Disk I/O

    Monitor Disk Usage (Block I/O):

    bash
    virsh domblkstat VM_Name vda

    This command gives detailed statistics about the disk I/O usage on the vda block device of the VM.

2.3 Monitoring Network Usage

    Monitor Network Bandwidth:

    bash
    virsh domifstat VM_Name vnet0

    This command shows network statistics for the vnet0 interface of the VM.

2.4 Using virt-top

virt-top is a powerful tool for monitoring resource usage by VMs in real time, similar to how top works for processes.

    Install virt-top:

    bash
    sudo apt install virt-top

    Run virt-top:

    bash
    virt-top

    This will show live resource usage, including CPU, memory, disk I/O, and network usage for all running VMs.

2.5 Using vnstat for Network Monitoring

For more detailed network statistics, you can install vnstat on the host.

    Install vnstat:

    bash
    sudo apt install vnstat

    Monitor VM Network Usage: Use the vnstat tool to track and report network interface usage, such as for virtual NICs (vnet0, vnet1, etc.).

3. Automating Monitoring with Alerts

For production environments, you might want to automate monitoring and set alerts when resources exceed thresholds. You can use tools like Prometheus and Grafana for this:

    Prometheus: Monitors your VMs and collects metrics via libvirt exporters.
    Grafana: Visualizes these metrics and sets up alerts when thresholds are crossed.

Conclusion

With libvirt and KVM/QEMU, you have extensive control over the allocation and monitoring of resources for your virtual machines. You can adjust CPU, memory, disk I/O, and network bandwidth allocation and use various virsh commands and tools like virt-top and vnstat to monitor resource usage. For production environments, automating monitoring with tools like Prometheus and Grafana can help manage resources more effectively.

